service: sunchirp-api
frameworkVersion: '2 || 3'

plugins:
  - serverless-s3-sync

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}

functions:
  hello:
    handler: src/handlers/handler.hello
    events:
      - httpApi:
          path: /hello
          method: get

resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.siteName}
        # Granting public access to bucket
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          IndexDocument: index.html

custom:
  siteName: sunchirp.com
  hostedZoneName: serverless-sunchirp.com
  aliasHostedZoneId: Z3AQBSTGFYJSTF    # us-east-1
  aliasDNSName: s3-website-us-east-1.amazonaws.com
  
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: ../frontend/dist
  
  StaticSiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticSite
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
              Fn::Join: [
                "", [
                  "arn:aws:s3:::",
                  {
                    "Ref": "StaticSite"
                  },
                  "/*"
                ]
              ]
            Condition:
                Bool:
                  aws:SecureTransport: 'true'
  
  DnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: ${self:custom.aliasDNSName}
        HostedZoneId: ${self:custom.aliasHostedZoneId}
      HostedZoneName: ${self:custom.siteName}.
      Name:
        Ref: StaticSite
      Type: 'A'
